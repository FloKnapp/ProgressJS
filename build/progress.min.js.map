{
  "version": 3,
  "sources": ["../src/progress.js"],
  "sourcesContent": ["// Public proxy object to be able to update progress bars\nlet progressJs = {};\n\n((progressJs) => {\n\n    'use strict';\n\n    const _defaults = {\n\n        width : 100,\n        height : 100,\n        strokeWidth : 10,\n        fgColor : '#757AAE',\n        bgColor : '#CCCCCC',\n        duration : '2s',\n        fontFamily : 'Helvetica, Arial, sans-serif',\n        fontSize : '.8rem',\n        fontColor: '#AAAAAA',\n        fontWeight: '900',\n        value : 0,\n        overall : 100,\n        suffix: '%',\n        shadow: false\n    };\n\n    document.addEventListener('DOMContentLoaded', function() {\n\n        // Auto select html elements and generate progress object\n        document.querySelectorAll('.progress-js').forEach(function(target) {\n\n            // These are the properties which can be set through the dataset attributes\n            const progress = new Progress(target, {\n                width:       target.dataset.width,\n                height:      target.dataset.height,\n                strokeWidth: target.dataset.strokeWidth,\n                fgColor:     target.dataset.fgColor,\n                bgColor:     target.dataset.bgColor,\n                fontSize:    target.dataset.fontSize,\n                fontWeight:  target.dataset.fontWeight,\n                duration:    target.dataset.duration,\n                value:       target.dataset.value,\n                overall:     target.dataset.overall,\n                suffix:      target.dataset.suffix,\n                shadow:      target.dataset.shadow\n            });\n\n            progress.render();\n\n        });\n\n    });\n\n    /**\n     * Progress object\n     *\n     * @param {HTMLElement|string} target\n     * @param {Object} opts\n     *\n     * @returns {Progress}\n     *\n     * @constructor\n     */\n    const Progress = function (target, opts) {\n\n        this.options = {\n            width:       (typeof(opts.width) !== 'undefined') ? opts.width : _defaults.width,\n            height:      (typeof(opts.height) !== 'undefined') ? opts.height : _defaults.height,\n            strokeWidth: (typeof(opts.strokeWidth) !== 'undefined') ? opts.strokeWidth : _defaults.strokeWidth,\n            fgColor:     (typeof(opts.fgColor) !== 'undefined') ? opts.fgColor : _defaults.fgColor,\n            bgColor:     (typeof(opts.bgColor) !== 'undefined') ? opts.bgColor : _defaults.bgColor,\n            duration:    (typeof(opts.duration) !== 'undefined') ? opts.duration : _defaults.duration,\n            fontFamily:  (typeof(opts.fontFamily) !== 'undefined') ? opts.fontFamily : _defaults.fontFamily,\n            fontSize:    (typeof(opts.fontSize) !== 'undefined') ? opts.fontSize : _defaults.fontSize,\n            fontColor:   (typeof(opts.fontColor) !== 'undefined') ? opts.fontColor : _defaults.fontColor,\n            fontWeight:  (typeof(opts.fontWeight) !== 'undefined') ? opts.fontWeight : _defaults.fontWeight,\n            value:       (typeof(opts.value) !== 'undefined') ? opts.value : _defaults.value,\n            overall:     (typeof(opts.overall) !== 'undefined') ? opts.overall : _defaults.overall,\n            suffix:      (typeof(opts.suffix) !== 'undefined') ? opts.suffix : _defaults.suffix,\n            shadow:      (typeof(opts.shadow) !== 'undefined') ? opts.shadow : _defaults.shadow\n        };\n\n        // This holds the associated .progress-js container\n        this._target = target instanceof HTMLElement\n            ? target\n            : document.querySelector(target);\n\n        this._id = 'progress-js-' + (progressJs._instances.length + 1);\n        this._value = parseInt('' + this.options.value);\n        this._previousValue = 0;\n        this._hasDomAppended = false;\n\n        // These should only being created or searched once to minimize unnecessary dom operations\n        this._svg = this.createCircularBars();\n        this._label = this.createLabel();\n        this._labelText = this._label.querySelector('.currentProgress');\n        this._primaryProgressBar = this._svg.querySelector('.progress-value');\n\n        // Set the id on the associated container\n        this._target.id = this._id;\n        this._target.style.position = 'relative';\n\n        // Publish the created instance into the public scope\n        progressJs._instances.push(this);\n\n    };\n\n    /**\n     * Create SVG\n     *\n     * @returns {Element}\n     */\n    Progress.prototype.createCircularBars = function() {\n\n        const namespace = 'http://www.w3.org/2000/svg';\n\n        const radius = ((this.options.width / 2) - this.options.strokeWidth).toString();\n        const circumference = 2 * Math.PI * radius;\n\n        const svg = document.createElementNS(namespace, 'svg');\n        svg.setAttribute('class', 'progress');\n        svg.setAttribute('width', this.options.width.toString());\n        svg.setAttribute('height', this.options.height.toString());\n        svg.setAttribute('viewBox', '0 0 ' + this.options.width + ' ' + this.options.height);\n        svg.style.transform = 'rotate(-90deg)';\n\n        const createCircle = (className, color) => {\n            const circle = document.createElementNS(namespace, 'circle');\n            circle.setAttribute('class', className);\n            circle.setAttribute('stroke', color);\n            circle.setAttribute('stroke-width', this.options.strokeWidth.toString());\n            circle.setAttribute('fill', 'none');\n            circle.setAttribute('cx', (this.options.width / 2).toString());\n            circle.setAttribute('cy', (this.options.height / 2).toString());\n            circle.setAttribute('r', radius);\n            return circle;\n        };\n\n        const circle1 = createCircle('progress-meter', this.options.bgColor);\n\n        if (this.options.shadow) {\n            circle1.style.filter = 'drop-shadow(-2px 0px 1px rgba(0,0,0,0.3))';\n        }\n\n        const circle2 = createCircle('progress-value', this.options.fgColor);\n\n        circle2.style.strokeDasharray  = circumference.toString();\n        circle2.style.strokeDashoffset = circumference.toString();\n        circle2.style.animation        = `progress_${this._id} this.options.duration`;\n        circle2.style.transition       = `all ${this.options.duration}`;\n\n        svg.appendChild(circle1);\n        svg.appendChild(circle2);\n\n        this._primaryProgressBar = circle2;\n\n        return svg;\n\n    };\n\n    /**\n     * Create label container\n     *\n     * @return {HTMLDivElement}\n     */\n    Progress.prototype.createLabel = function() {\n\n        // Create label container for progress value and set some styles\n        const labelContainer = document.createElement('div');\n\n        labelContainer.className = 'label';\n        labelContainer.style.lineHeight = '18px';\n        labelContainer.style.fontFamily = this.options.fontFamily;\n        labelContainer.style.position = 'absolute';\n        labelContainer.style.width = '100%';\n        labelContainer.style.height = '100%';\n\n        let currentProgress = '0';\n\n        const labelCurrentProgress = document.createElement('span');\n\n        labelCurrentProgress.innerText = currentProgress;\n\n        labelCurrentProgress.className = 'currentProgress';\n        labelCurrentProgress.style.display = 'block';\n        labelCurrentProgress.style.fontSize = this.options.fontSize;\n        labelCurrentProgress.style.color = this.options.fgColor;\n        labelCurrentProgress.style.fontWeight = this.options.fontWeight;\n        labelCurrentProgress.style.position = 'absolute';\n        labelCurrentProgress.style.left = '50%';\n        labelCurrentProgress.style.top = '50%';\n        labelCurrentProgress.style.transform = 'translate(-50%, -50%)';\n\n        labelContainer.appendChild(labelCurrentProgress);\n\n        return labelContainer;\n\n    };\n\n    /**\n     * Update the current progress value\n     *\n     * @param number\n     */\n    Progress.prototype.update = function(number) {\n\n        this._previousValue = this._value;\n        this._value = number;\n\n        this.render();\n\n    };\n\n    /**\n     * Calculate radius, circumference, current progress and resulting offset\n     *\n     * @returns {{radius: number, circumference: number, progress: number, offset: number}}\n     */\n    Progress.prototype.calculate = function() {\n\n        let percent = null;\n\n        if (this._value !== 0 && this.options.overall !== 0) {\n            percent = (this._value / this.options.overall);\n        }\n\n        const progress = percent;\n        const radius = ((this.options.width / 2) - this.options.strokeWidth);\n        const circumference = 2 * Math.PI * radius;\n        const offset = circumference * (1 - progress);\n\n        return {\n            progress:      progress,\n            radius:        radius,\n            circumference: circumference,\n            offset:        offset\n        };\n\n    };\n\n    /**\n     * Animating the percentage according to the configured duration (with help from ChatGPT 3.5)\n     */\n    Progress.prototype.animateCount = function() {\n\n        const steps = 50;\n        const stepDuration = (parseInt(this.options.duration) * 1000) / steps;\n\n        let currentValue = this._previousValue;\n        const totalChange = this._value - this._previousValue;\n        let step = 0;\n\n        const update = () => {\n            const progress = step / steps;\n            const easedProgress = 1 - (1 - progress) * (1 - progress);\n            const increment = totalChange * easedProgress;\n\n            currentValue = this._previousValue + increment;\n            this._labelText.innerText = Math.round(currentValue) + this.options.suffix;\n\n            if ((totalChange > 0 && currentValue < this._value) || (totalChange < 0 && currentValue > this._value)) {\n                step++;\n                setTimeout(update, stepDuration);\n            } else {\n                this._labelText.innerText = this._value + this.options.suffix;\n            }\n        };\n\n        update();\n\n    }\n\n    /**\n     * Get everything together and append dom elements when necessary\n     */\n    Progress.prototype.render = function() {\n\n        const data = this.calculate();\n\n        // The progress must be below 1\n        if (data.progress > 1) {\n            return;\n        }\n\n        this._target.style.width = this.options.width + 'px';\n        this._target.style.height = this.options.height + 'px';\n\n        // Set the current data with a delay to trigger the animation correctly\n        setTimeout(() => {\n            this._primaryProgressBar.style.strokeDasharray  = data.circumference.toString();\n            this._primaryProgressBar.style.strokeDashoffset = data.offset.toString();\n        }, 10);\n\n        if (!this._hasDomAppended) {\n            this._hasDomAppended = true;\n            this._target.appendChild(this._label);\n            this._target.appendChild(this._svg);\n        }\n\n        this.animateCount();\n\n    };\n\n    progressJs = {\n        _instances: [],\n        create: function(target, options) {\n            return new Progress(target, options);\n        },\n        update: function(id, value) {\n            const progress = this._instances.find((item) => {\n                return item._id === id;\n            });\n            if (progress) {\n                progress.update(value);\n            } else {\n                console.error('Progress item with id ' + id + ' not found.')\n            }\n        }\n    };\n\n})(progressJs);"],
  "mappings": "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",
  "names": ["progressJs", "_defaults", "target", "Progress", "opts", "namespace", "radius", "circumference", "svg", "createCircle", "className", "color", "circle", "circle1", "circle2", "labelContainer", "currentProgress", "labelCurrentProgress", "number", "percent", "progress", "offset", "stepDuration", "currentValue", "totalChange", "step", "update", "easedProgress", "increment", "data", "options", "id", "value", "item"]
}
